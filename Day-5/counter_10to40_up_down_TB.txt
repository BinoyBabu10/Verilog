`timescale 1ns / 1ps


module counter_10t040_up_down_TB;
    reg clk, rst, u_d, load;
    reg [7:0] data;
    wire [7:0] count;
    
    // Instantiate the Device Under Test (DUT)
    counter_10t040_up_down DUT (
        .count(count),
        .clk(clk),
        .rst(rst),
        .u_d(u_d),
        .load(load),
        .data(data)
    );
    
    // Clock Generation
    initial begin
        clk = 0;
        forever #5 clk = ~clk; // Clock toggles every 5ns (100 MHz)
    end
    
    // Test Sequence
    initial begin
        // Initialize signals
        rst = 0;
        u_d = 1;      // Set to count up initially
        load = 0;     // No load initially
        data = 8'd0;  // Default data
        
        // Monitor signals for debugging
        $monitor("Time=%0t, clk=%b, rst=%b, u_d=%b, load=%b, count=%b", 
                 $time, clk, rst, u_d, load, count);
        
        // Apply reset
        #5 rst = 1; // Assert reset
        #10 rst = 0; // Deassert reset
        
        // Test counting up
        #10 u_d = 1;  // Set to count up
        #30;  // Wait 30ns (expect count to increment)
        
        // Test counting down
        #10 u_d = 0;  // Set to count down
        #30;  // Wait 30ns (expect count to decrement)
        
        // Test loading a custom value
        #10 load = 1;  // Assert load
        data = 8'd25;  // Load value 25
        #10 load = 0;  // Deassert load
        #30; // Wait for a while (expect count to increment based on loaded value)

        // Test reset again
        #10 rst = 1;   // Assert reset
        #10 rst = 0;   // Deassert reset
        
        // Test counting up after reset
        #10 u_d = 1;  // Set to count up again
        #30;  // Wait 30ns
        
        // Test reset with load active
        #10 load = 1;  // Assert load
        data = 8'd15;  // Load value 15
        #10 load = 0;  // Deassert load
        #20; // Wait for a while
        
        // End simulation after 200ns
        #200 $stop;
    end

endmodule
